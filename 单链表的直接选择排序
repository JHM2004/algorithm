#include<iostream>
using namespace std;

// 定义单链表节点
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

// 定义链表的选择排序函数
ListNode* SelectionSort(ListNode* head) {
    ListNode* newHead = NULL; // 新链表的头节点
    while (head != NULL) {
        ListNode* minNode = head; //最小值节点
        ListNode* preNode = NULL; //最小值节点的前一个节点
        ListNode* curNode = head;
        while (curNode->next != NULL) {
            if (curNode->next->val < minNode->val) {
                preNode = curNode;
                minNode = curNode->next;
            }
            curNode = curNode->next;
        }
        if (minNode == head) {
            head = head->next;
        }
        if (preNode != NULL) {
            preNode->next = minNode->next;
        }
        if (newHead == NULL) {
            newHead = minNode;
        }
        else {
            ListNode* tail = newHead;
            while (tail->next != NULL) {
                tail = tail->next;
            }
            tail->next = minNode;
        }
        minNode->next = NULL;
    }
    return newHead;
}

// 测试
int main() {
    // 生成测试用例链表
    ListNode* node1 = new ListNode(5);
    ListNode* node2 = new ListNode(2);
    ListNode* node3 = new ListNode(4);
    ListNode* node4 = new ListNode(1);
    ListNode* node5 = new ListNode(3);

    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node5;

    cout << "原链表：";
    ListNode* p = node1;
    while (p != NULL) {
        cout << p->val << " ";
        p = p->next;
    }
    cout << endl;

    // 选择排序
    ListNode* newHead = SelectionSort(node1);

    cout << "排序后链表：";
    p = newHead;
    while (p != NULL) {
        cout << p->val << " ";
        p = p->next;
    }
    cout << endl;

    return 0;
}
//gpt