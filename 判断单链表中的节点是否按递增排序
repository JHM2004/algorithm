以下是一个C++程序，用于检查一个单链表中的节点是否按递增顺序排序，在该程序中，我们假定一个单链表的节点定义如下：

```c++
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};
```

这个程序的主要思路是遍历链表，并检查相邻节点值的大小关系，如果存在逆序对，则说明该链表没有按升序排列。代码如下：

```c++
#include<iostream>
using namespace std;
 
bool isAscending(ListNode* head) {
    if (head == NULL || head->next == NULL) {
        return true; // 空链表或者只有一个节点的链表一定是按升序排列的
    }
    ListNode* p = head;
    while (p->next != NULL) {
        if (p->val > p->next->val) {
            return false; //存在逆序对
        }
        p = p->next;
    }
    return true; // 遍历完全有序
}

int main() {
    ListNode* node1 = new ListNode(1);
    ListNode* node2 = new ListNode(2);
    ListNode* node3 = new ListNode(3);
    ListNode* node4 = new ListNode(4);
    ListNode* node5 = new ListNode(5);

    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node5;

    bool result = isAscending(node1);

    cout << "该链表是否按递增顺序排序：" << result << endl;

    return 0;
}
```

以上程序中，我们定义了一个`isAscending()`函数来检查一个单链表是否按升序排列。具体地，我们首先特判输入链表为空或只有一个节点的情况，因为这两种情况都是满足升序排列的。之后我们遍历链表，检查相邻节点值是否有逆序对，如果有，说明链表不是按升序排列的，直接返回`false`；否则，整个链表都已经遍历完全有序，返回`true`。
//gpt