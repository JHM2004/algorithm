#include<iostream>
using namespace std;

// 定义单链表节点
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

// 定义链表的插入排序函数
ListNode* InsertionSort(ListNode* head) {
    if (head == NULL || head->next == NULL) {
        return head; //空链表或只有一个节点的链表不需要排序
    }
    ListNode* newHead = new ListNode(0); // 新链表的虚拟头节点
    newHead->next = head;
    ListNode* preNode = head; //已排序区间的尾节点
    ListNode* curNode = head->next; //待排序区间的头节点
    while (curNode != NULL) {
        //在已排序区间中寻找插入位置
        if (preNode->val <= curNode->val) {
            preNode = preNode->next;
        }
        else {
            ListNode* insertNode = newHead;
            while (insertNode->next->val <= curNode->val) {
                insertNode = insertNode->next;
            }
            //将待排序区间的当前节点插入到插入位置
            preNode->next = curNode->next;
            curNode->next = insertNode->next;
            insertNode->next = curNode;
            curNode = preNode->next;
        }
    }
    return newHead->next;
}

// 测试
int main() {
    // 生成测试用例链表
    ListNode* node1 = new ListNode(5);
    ListNode* node2 = new ListNode(2);
    ListNode* node3 = new ListNode(4);
    ListNode* node4 = new ListNode(1);
    ListNode* node5 = new ListNode(3);

    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node5;

    cout << "原链表：";
    ListNode* p = node1;
    while (p != NULL) {
        cout << p->val << " ";
        p = p->next;
    }
    cout << endl;

    // 插入排序
    ListNode* newHead = InsertionSort(node1);

    cout << "排序后链表：";
    p = newHead;
    while (p != NULL) {
        cout << p->val << " ";
        p = p->next;
    }
    cout << endl;

    return 0;
}
//gpt